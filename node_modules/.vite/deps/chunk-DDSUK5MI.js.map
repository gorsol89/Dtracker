{
  "version": 3,
  "sources": ["../../ol/render/canvas/Instruction.js", "../../ol/render/VectorContext.js", "../../ol/render/canvas/Builder.js", "../../ol/render/canvas/ImageBuilder.js", "../../ol/render/canvas/LineStringBuilder.js", "../../ol/render/canvas/PolygonBuilder.js", "../../ol/geom/flat/linechunk.js", "../../ol/geom/flat/straightchunk.js", "../../ol/render/canvas/TextBuilder.js", "../../ol/render/canvas/BuilderGroup.js", "../../ol/geom/flat/textpath.js", "../../ol/render/canvas/Executor.js", "../../ol/render/canvas/ExecutorGroup.js", "../../ol/render/canvas/Immediate.js", "../../ol/style.js", "../../ol/render/canvas/hitdetect.js", "../../ol/renderer/vector.js", "../../ol/renderer/canvas/VectorLayer.js", "../../ol/layer/Vector.js"],
  "sourcesContent": ["/**\n * @module ol/render/canvas/Instruction\n */\n\n/**\n * @enum {number}\n */\nconst Instruction = {\n  BEGIN_GEOMETRY: 0,\n  BEGIN_PATH: 1,\n  CIRCLE: 2,\n  CLOSE_PATH: 3,\n  CUSTOM: 4,\n  DRAW_CHARS: 5,\n  DRAW_IMAGE: 6,\n  END_GEOMETRY: 7,\n  FILL: 8,\n  MOVE_TO_LINE_TO: 9,\n  SET_FILL_STYLE: 10,\n  SET_STROKE_STYLE: 11,\n  STROKE: 12,\n};\n\n/**\n * @type {Array<Instruction>}\n */\nexport const fillInstruction = [Instruction.FILL];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const strokeInstruction = [Instruction.STROKE];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\n\nexport default Instruction;\n", "/**\n * @module ol/render/VectorContext\n */\n\n/**\n * @classdesc\n * Context for drawing geometries.  A vector context is available on render\n * events and does not need to be constructed directly.\n * @api\n */\nclass VectorContext {\n  /**\n   * Render a geometry with a custom renderer.\n   *\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   * @param {number} [index] Render order index.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}\n\n  /**\n   * Render a geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\n   */\n  drawGeometry(geometry) {}\n\n  /**\n   * Set the rendering style.\n   *\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\n   */\n  setStyle(style) {}\n\n  /**\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawCircle(circleGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"../style/Style.js\").default} style Style.\n   * @param {number} [index] Render order index.\n   */\n  drawFeature(feature, style, index) {}\n\n  /**\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawGeometryCollection(geometryCollectionGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawLineString(lineStringGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiPoint(multiPointGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawPoint(pointGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawPolygon(polygonGeometry, feature, index) {}\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   */\n  drawText(geometry, feature, index) {}\n\n  /**\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\n\n  /**\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\n   */\n  setImageStyle(imageStyle, declutterImageWithText) {}\n\n  /**\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\n   */\n  setTextStyle(textStyle, declutterImageWithText) {}\n}\n\nexport default VectorContext;\n", "/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  buffer,\n  clone,\n  containsCoordinate,\n  coordinateRelationship,\n} from '../../extent.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../canvas.js';\nimport {equals, reverseSubArray} from '../../array.js';\nimport {\n  inflateCoordinates,\n  inflateCoordinatesArray,\n  inflateMultiCoordinatesArray,\n} from '../../geom/flat/inflate.js';\n\nclass CanvasBuilder extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1\n      ? dashArray\n      : dashArray.map(function (dash) {\n          return dash * pixelRatio;\n        });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    closed,\n    skipFirst,\n  ) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        false,\n        false,\n      );\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {\n    this.beginGeometry(geometry, feature, index);\n\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n\n    switch (type) {\n      case 'MultiPolygon':\n        flatCoordinates =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getOrientedFlatCoordinates();\n        builderEndss = [];\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        offset = 0;\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          const myEnds = [];\n          offset = this.drawCustomCoordinates_(\n            flatCoordinates,\n            offset,\n            endss[i],\n            stride,\n            myEnds,\n          );\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          renderer,\n          inflateMultiCoordinatesArray,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateMultiCoordinatesArray,\n          index,\n        ]);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        builderEnds = [];\n        flatCoordinates =\n          type == 'Polygon'\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\n                geometry\n              ).getOrientedFlatCoordinates()\n            : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(\n          flatCoordinates,\n          0,\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          ).getEnds(),\n          stride,\n          builderEnds,\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          renderer,\n          inflateCoordinatesArray,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinatesArray,\n          index,\n        ]);\n        break;\n      case 'LineString':\n      case 'Circle':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(\n          flatCoordinates,\n          0,\n          flatCoordinates.length,\n          stride,\n          false,\n          false,\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          inflateCoordinates,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinates,\n          index,\n        ]);\n        break;\n      case 'MultiPoint':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n\n        if (builderEnd > builderBegin) {\n          this.instructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            renderer,\n            inflateCoordinates,\n            index,\n          ]);\n          this.hitDetectionInstructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            hitDetectionRenderer || renderer,\n            inflateCoordinates,\n            index,\n          ]);\n        }\n        break;\n      case 'Point':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          undefined,\n          index,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          undefined,\n          index,\n        ]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} index Render order index\n   */\n  beginGeometry(geometry, feature, index) {\n    this.beginGeometryInstruction1_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n      index,\n    ];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n      index,\n    ];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates,\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   * @override\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillPatternScale =\n        fillStyleColor &&\n        typeof fillStyleColor === 'object' &&\n        'src' in fillStyleColor\n          ? this.pixelRatio\n          : 1;\n      state.fillStyle = asColorLike(\n        fillStyleColor ? fillStyleColor : defaultFillStyle,\n      );\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\n      );\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap =\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash.slice()\n        : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset\n        ? strokeStyleLineDashOffset\n        : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin =\n        strokeStyleLineJoin !== undefined\n          ? strokeStyleLineJoin\n          : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth =\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit =\n        strokeStyleMiterLimit !== undefined\n          ? strokeStyleMiterLimit\n          : defaultMiterLimit;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align and scale it!\n      fillInstruction.push(state.fillPatternScale);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle,\n      state.lineWidth * this.pixelRatio,\n      state.lineCap,\n      state.lineJoin,\n      state.miterLimit,\n      this.applyPixelRatio(state.lineDash),\n      state.lineDashOffset * this.pixelRatio,\n    ];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (\n      state.currentStrokeStyle != strokeStyle ||\n      state.currentLineCap != lineCap ||\n      (lineDash != state.currentLineDash &&\n        !equals(state.currentLineDash, lineDash)) ||\n      state.currentLineDashOffset != lineDashOffset ||\n      state.currentLineJoin != lineJoin ||\n      state.currentLineWidth != lineWidth ||\n      state.currentMiterLimit != miterLimit\n    ) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\nexport default CanvasBuilder;\n", "/**\n * @module ol/render/canvas/ImageBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport {containsCoordinate} from '../../extent.js';\n\nclass CanvasImageBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.imagePixelRatio_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorY_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.height_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.opacity_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originY_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = undefined;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size|undefined}\n     */\n    this.scale_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = undefined;\n\n    /**\n     * @private\n     * @type {import('../../style/Style.js').DeclutterMode}\n     */\n    this.declutterMode_ = undefined;\n\n    /**\n     * Data shared with a text builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawPoint(pointGeometry, feature, index) {\n    if (\n      !this.image_ ||\n      (this.maxExtent &&\n        !containsCoordinate(this.maxExtent, pointGeometry.getFlatCoordinates()))\n    ) {\n      return;\n    }\n    this.beginGeometry(pointGeometry, feature, index);\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\n    const stride = pointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_ * this.imagePixelRatio_,\n      this.originY_ * this.imagePixelRatio_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      1,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawMultiPoint(multiPointGeometry, feature, index) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(multiPointGeometry, feature, index);\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n    const filteredFlatCoordinates = [];\n    for (\n      let i = 0, ii = flatCoordinates.length;\n      i < ii;\n      i += multiPointGeometry.getStride()\n    ) {\n      if (\n        !this.maxExtent ||\n        containsCoordinate(this.maxExtent, flatCoordinates.slice(i, i + 2))\n      ) {\n        filteredFlatCoordinates.push(\n          flatCoordinates[i],\n          flatCoordinates[i + 1],\n        );\n      }\n    }\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(filteredFlatCoordinates, 2);\n    this.instructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_ * this.imagePixelRatio_,\n      this.originY_ * this.imagePixelRatio_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      1,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   * @override\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\n    this.anchorX_ = undefined;\n    this.anchorY_ = undefined;\n    this.hitDetectionImage_ = null;\n    this.image_ = null;\n    this.imagePixelRatio_ = undefined;\n    this.height_ = undefined;\n    this.scale_ = undefined;\n    this.opacity_ = undefined;\n    this.originX_ = undefined;\n    this.originY_ = undefined;\n    this.rotateWithView_ = undefined;\n    this.rotation_ = undefined;\n    this.width_ = undefined;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @param {Object} [sharedData] Shared data.\n   * @override\n   */\n  setImageStyle(imageStyle, sharedData) {\n    const anchor = imageStyle.getAnchor();\n    const size = imageStyle.getSize();\n    const origin = imageStyle.getOrigin();\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\n    this.anchorX_ = anchor[0];\n    this.anchorY_ = anchor[1];\n    this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\n    this.image_ = imageStyle.getImage(this.pixelRatio);\n    this.height_ = size[1];\n    this.opacity_ = imageStyle.getOpacity();\n    this.originX_ = origin[0];\n    this.originY_ = origin[1];\n    this.rotateWithView_ = imageStyle.getRotateWithView();\n    this.rotation_ = imageStyle.getRotation();\n    this.scale_ = imageStyle.getScaleArray();\n    this.width_ = size[0];\n    this.declutterMode_ = imageStyle.getDeclutterMode();\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\nexport default CanvasImageBuilder;\n", "/**\n * @module ol/render/canvas/LineStringBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\n\nclass CanvasLineStringBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatLineCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      false,\n      false,\n    );\n    const moveToLineToInstruction = [\n      CanvasInstruction.MOVE_TO_LINE_TO,\n      myBegin,\n      myEnd,\n    ];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  }\n\n  /**\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawLineString(lineStringGeometry, feature, index) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature, index);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction,\n    );\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    const stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n    );\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawMultiLineString(multiLineStringGeometry, feature, index) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature, index);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction,\n    );\n    const ends = multiLineStringGeometry.getEnds();\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    const stride = multiLineStringGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinates_(\n        flatCoordinates,\n        offset,\n        /** @type {number} */ (ends[i]),\n        stride,\n      );\n    }\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   * @override\n   */\n  finish() {\n    const state = this.state;\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n    }\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @override\n   */\n  applyStroke(state) {\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n    state.lastStroke = 0;\n    super.applyStroke(state);\n    this.instructions.push(beginPathInstruction);\n  }\n}\n\nexport default CanvasLineStringBuilder;\n", "/**\n * @module ol/render/canvas/PolygonBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  closePathInstruction,\n  fillInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {\n  defaultFillStyle,\n  defaultLineDash,\n  defaultLineDashOffset,\n} from '../canvas.js';\nimport {snap} from '../../geom/flat/simplify.js';\n\nclass CanvasPolygonBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\n    const state = this.state;\n    const fill = state.fillStyle !== undefined;\n    const stroke = state.strokeStyle !== undefined;\n    const numEnds = ends.length;\n    this.instructions.push(beginPathInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction);\n    for (let i = 0; i < numEnds; ++i) {\n      const end = ends[i];\n      const myBegin = this.coordinates.length;\n      const myEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        true,\n        !stroke,\n      );\n      const moveToLineToInstruction = [\n        CanvasInstruction.MOVE_TO_LINE_TO,\n        myBegin,\n        myEnd,\n      ];\n      this.instructions.push(moveToLineToInstruction);\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\n      if (stroke) {\n        // Performance optimization: only call closePath() when we have a stroke.\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n        this.instructions.push(closePathInstruction);\n        this.hitDetectionInstructions.push(closePathInstruction);\n      }\n      offset = end;\n    }\n    if (fill) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n    if (stroke) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawCircle(circleGeometry, feature, index) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(circleGeometry, feature, index);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ]);\n    }\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\n    const stride = circleGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    this.appendFlatLineCoordinates(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      false,\n      false,\n    );\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\n    this.instructions.push(beginPathInstruction, circleInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\n    if (state.fillStyle !== undefined) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawPolygon(polygonGeometry, feature, index) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(polygonGeometry, feature, index);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ]);\n    }\n    const ends = polygonGeometry.getEnds();\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n    const stride = polygonGeometry.getStride();\n    this.drawFlatCoordinatess_(\n      flatCoordinates,\n      0,\n      /** @type {Array<number>} */ (ends),\n      stride,\n    );\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(multiPolygonGeometry, feature, index);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ]);\n    }\n    const endss = multiPolygonGeometry.getEndss();\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n    const stride = multiPolygonGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinatess_(\n        flatCoordinates,\n        offset,\n        endss[i],\n        stride,\n      );\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   * @override\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    // We want to preserve topology when drawing polygons.  Polygons are\n    // simplified using quantization and point elimination. However, we might\n    // have received a mix of quantized and non-quantized geometries, so ensure\n    // that all are quantized by quantizing all coordinates in the batch.\n    const tolerance = this.tolerance;\n    if (tolerance !== 0) {\n      const coordinates = this.coordinates;\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = snap(coordinates[i], tolerance);\n      }\n    }\n    return super.finish();\n  }\n\n  /**\n   * @private\n   */\n  setFillStrokeStyles_() {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    if (fillStyle !== undefined) {\n      this.updateFillStyle(state, this.createFill);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.updateStrokeStyle(state, this.applyStroke);\n    }\n  }\n}\n\nexport default CanvasPolygonBuilder;\n", "import {lerp} from '../../math.js';\n\n/**\n * Creates chunks of equal length from a linestring\n * @param {number} chunkLength Length of each chunk.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\n */\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\n  const chunks = [];\n  let cursor = offset;\n  let chunkM = 0;\n  let currentChunk = flatCoordinates.slice(offset, 2);\n  while (chunkM < chunkLength && cursor + stride < end) {\n    const [x1, y1] = currentChunk.slice(-2);\n    const x2 = flatCoordinates[cursor + stride];\n    const y2 = flatCoordinates[cursor + stride + 1];\n    const segmentLength = Math.sqrt(\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1),\n    );\n    chunkM += segmentLength;\n    if (chunkM >= chunkLength) {\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n      const x = lerp(x1, x2, m);\n      const y = lerp(y1, y2, m);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      if (chunkM == chunkLength) {\n        cursor += stride;\n      }\n      chunkM = 0;\n    } else if (chunkM < chunkLength) {\n      currentChunk.push(\n        flatCoordinates[cursor + stride],\n        flatCoordinates[cursor + stride + 1],\n      );\n      cursor += stride;\n    } else {\n      const missing = segmentLength - chunkM;\n      const x = lerp(x1, x2, missing / segmentLength);\n      const y = lerp(y1, y2, missing / segmentLength);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      chunkM = 0;\n      cursor += stride;\n    }\n  }\n  if (chunkM > 0) {\n    chunks.push(currentChunk);\n  }\n  return chunks;\n}\n", "/**\n * @module ol/geom/flat/straightchunk\n */\n\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n  let chunkStart = offset;\n  let chunkEnd = offset;\n  let chunkM = 0;\n  let m = 0;\n  let start = offset;\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n  for (i = offset; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    if (x1 !== undefined) {\n      x23 = x2 - x1;\n      y23 = y2 - y1;\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\n      if (x12 !== undefined) {\n        m += m12;\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n        if (acos > maxAngle) {\n          if (m > chunkM) {\n            chunkM = m;\n            chunkStart = start;\n            chunkEnd = i;\n          }\n          m = 0;\n          start = i - stride;\n        }\n      }\n      m12 = m23;\n      x12 = x23;\n      y12 = y23;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  m += m23;\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n", "/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultPadding,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n  registerFont,\n} from '../canvas.js';\nimport {getUid} from '../../util.js';\nimport {intersects} from '../../extent.js';\nimport {lineChunk} from '../../geom/flat/linechunk.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'center': 0.5,\n  'right': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textKeepUpright_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n    this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * @private\n     * @type {import('../../style/Style.js').DeclutterMode}\n     */\n    this.declutterMode_ = undefined;\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   * @override\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} [index] Render order index.\n   * @override\n   */\n  drawText(geometry, feature, index) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n\n    if (\n      textState.placement === 'line' &&\n      (geometryType == 'LineString' ||\n        geometryType == 'MultiLineString' ||\n        geometryType == 'Polygon' ||\n        geometryType == 'MultiPolygon')\n    ) {\n      if (!intersects(this.maxExtent, geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature, index);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = lineChunk(\n            repeat * this.resolution,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride,\n          );\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = matchingChunk(\n              textState.maxAngle,\n              chunk,\n              0,\n              chunk.length,\n              2,\n            );\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n              geometry\n            ).getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\n              geometry\n            ).getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints =\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (\n        geometryWidths &&\n        (end - begin) / 2 !== flatCoordinates.length / stride\n      ) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep =\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke,\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature, index);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != defaultPadding &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        this.declutterMode_,\n        this.declutterImageWithText_,\n        padding == defaultPadding\n          ? defaultPadding\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      // Set default fill for hit detection background\n      const currentFillStyle = this.state.fillStyle;\n      if (textState.backgroundFill) {\n        this.state.fillStyle = defaultFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        this.declutterMode_,\n        this.declutterImageWithText_,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_ ? defaultFillStyle : this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      // Reset previous fill\n      if (textState.backgroundFill) {\n        this.state.fillStyle = currentFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n      this.declutterMode_,\n      this.textKeepUpright_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey ? defaultFillStyle : fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1 / pixelRatio,\n      this.declutterMode_,\n      this.textKeepUpright_,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   * @override\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle,\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle,\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textKeepUpright = textStyle.getKeepUpright();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textKeepUpright_ =\n        textKeepUpright === undefined ? true : textKeepUpright;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : getUid(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.repeat || '?') +\n        (textState.justify || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ =\n        fillState && fillState.fillStyle\n          ? typeof fillState.fillStyle == 'string'\n            ? fillState.fillStyle\n            : '|' + getUid(fillState.fillStyle)\n          : '';\n    }\n    this.declutterMode_ = textStyle.getDeclutterMode();\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\nexport default CanvasTextBuilder;\n", "/**\n * @module ol/render/canvas/BuilderGroup\n */\n\nimport Builder from './Builder.js';\nimport ImageBuilder from './ImageBuilder.js';\nimport LineStringBuilder from './LineStringBuilder.js';\nimport PolygonBuilder from './PolygonBuilder.js';\nimport TextBuilder from './TextBuilder.js';\n\n/**\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\n */\nconst BATCH_CONSTRUCTORS = {\n  'Circle': PolygonBuilder,\n  'Default': Builder,\n  'Image': ImageBuilder,\n  'LineString': LineStringBuilder,\n  'Polygon': PolygonBuilder,\n  'Text': TextBuilder,\n};\n\nclass BuilderGroup {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tolerance_ = tolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\n     */\n    this.buildersByZIndex_ = {};\n  }\n\n  /**\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\n   */\n  finish() {\n    const builderInstructions = {};\n    for (const zKey in this.buildersByZIndex_) {\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\n      const builders = this.buildersByZIndex_[zKey];\n      for (const builderKey in builders) {\n        const builderInstruction = builders[builderKey].finish();\n        builderInstructions[zKey][builderKey] = builderInstruction;\n      }\n    }\n    return builderInstructions;\n  }\n\n  /**\n   * @param {number|undefined} zIndex Z index.\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\n   * @return {import(\"../VectorContext.js\").default} Replay.\n   */\n  getBuilder(zIndex, builderType) {\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\n    let replays = this.buildersByZIndex_[zIndexKey];\n    if (replays === undefined) {\n      replays = {};\n      this.buildersByZIndex_[zIndexKey] = replays;\n    }\n    let replay = replays[builderType];\n    if (replay === undefined) {\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\n      replay = new Constructor(\n        this.tolerance_,\n        this.maxExtent_,\n        this.resolution_,\n        this.pixelRatio_,\n      );\n      replays[builderType] = replay;\n    }\n    return replay;\n  }\n}\n\nexport default BuilderGroup;\n", "/**\n * @module ol/geom/flat/textpath\n */\nimport {lerp} from '../../math.js';\nimport {rotate} from './transform.js';\n\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @param {number} scale The product of the text scale and the device pixel ratio.\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\n * @param {string} font The font.\n * @param {Object<string, number>} cache A cache of measured widths.\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\n * @param {boolean} keepUpright Whether the text needs to be kept upright\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  text,\n  startM,\n  maxAngle,\n  scale,\n  measureAndCacheTextWidth,\n  font,\n  cache,\n  rotation,\n  keepUpright = true,\n) {\n  let x2 = flatCoordinates[offset];\n  let y2 = flatCoordinates[offset + 1];\n  let x1 = 0;\n  let y1 = 0;\n  let segmentLength = 0;\n  let segmentM = 0;\n\n  function advance() {\n    x1 = x2;\n    y1 = y2;\n    offset += stride;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    segmentM += segmentLength;\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n  do {\n    advance();\n  } while (offset < end - stride && segmentM + segmentLength < startM);\n\n  let interpolate =\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n  const beginX = lerp(x1, x2, interpolate);\n  const beginY = lerp(y1, y2, interpolate);\n\n  const startOffset = offset - stride;\n  const startLength = segmentM;\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n  while (offset < end - stride && segmentM + segmentLength < endM) {\n    advance();\n  }\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n  const endX = lerp(x1, x2, interpolate);\n  const endY = lerp(y1, y2, interpolate);\n\n  // Keep text upright if the option is selected\n  let reverse = false;\n  if (keepUpright) {\n    if (rotation) {\n      const flat = [beginX, beginY, endX, endY];\n      rotate(flat, 0, 4, 2, rotation, flat, flat);\n      reverse = flat[0] > flat[2];\n    } else {\n      reverse = beginX > endX;\n    }\n  }\n\n  const PI = Math.PI;\n  const result = [];\n  const singleSegment = startOffset + stride === offset;\n\n  offset = startOffset;\n  segmentLength = 0;\n  segmentM = startLength;\n  x2 = flatCoordinates[offset];\n  y2 = flatCoordinates[offset + 1];\n\n  let previousAngle;\n  // All on the same segment\n  if (singleSegment) {\n    advance();\n\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      previousAngle += previousAngle > 0 ? -PI : PI;\n    }\n    const x = (endX + beginX) / 2;\n    const y = (endY + beginY) / 2;\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\n    return result;\n  }\n\n  // rendering across line segments\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\n\n  for (let i = 0, ii = text.length; i < ii; ) {\n    advance();\n    let angle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      angle += angle > 0 ? -PI : PI;\n    }\n    if (previousAngle !== undefined) {\n      let delta = angle - previousAngle;\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n      if (Math.abs(delta) > maxAngle) {\n        return null;\n      }\n    }\n    previousAngle = angle;\n\n    const iStart = i;\n    let charLength = 0;\n    for (; i < ii; ++i) {\n      const index = reverse ? ii - i - 1 : i;\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n      if (\n        offset + stride < end &&\n        segmentM + segmentLength < startM + charLength + len / 2\n      ) {\n        break;\n      }\n      charLength += len;\n    }\n    if (i === iStart) {\n      continue;\n    }\n    const chars = reverse\n      ? text.substring(ii - iStart, ii - i)\n      : text.substring(iStart, i);\n    interpolate =\n      segmentLength === 0\n        ? 0\n        : (startM + charLength / 2 - segmentM) / segmentLength;\n    const x = lerp(x1, x2, interpolate);\n    const y = lerp(y1, y2, interpolate);\n    result.push([x, y, charLength / 2, angle, chars]);\n    startM += charLength;\n  }\n  return result;\n}\n", "/**\n * @module ol/render/canvas/Executor\n */\nimport CanvasInstruction from './Instruction.js';\nimport ZIndexContext from '../canvas/ZIndexContext.js';\nimport {TEXT_ALIGN} from './TextBuilder.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  setFromArray as transformSetFromArray,\n} from '../../transform.js';\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\nimport {\n  defaultPadding,\n  defaultTextAlign,\n  defaultTextBaseline,\n  drawImageOrLabel,\n  getTextDimensions,\n  measureAndCacheTextWidth,\n} from '../canvas.js';\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\nimport {equals} from '../../array.js';\nimport {lineStringLength} from '../../geom/flat/length.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {DeclutterEntry} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, import(\"../../style/Style.js\").DeclutterMode): T} FeatureCallback\n */\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {DeclutterEntry} Declutter rbush entry.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\n\nconst rtlRegEx = new RegExp(\n  /* eslint-disable prettier/prettier */\n  '[' +\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\n  ']'\n  /* eslint-enable prettier/prettier */\n);\n\n/**\n * @param {string} text Text.\n * @param {CanvasTextAlign} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if (align === 'start') {\n    align = rtlRegEx.test(text) ? 'right' : 'left';\n  } else if (align === 'end') {\n    align = rtlRegEx.test(text) ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push('\\n', '');\n  }\n  acc.push(line, '');\n  return acc;\n}\n\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions.\n   * @param {boolean} [deferredRendering] Enable deferred rendering.\n   */\n  constructor(\n    resolution,\n    pixelRatio,\n    overlaps,\n    instructions,\n    deferredRendering,\n  ) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.alignAndScaleFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas/ZIndexContext.js\").default}\n     */\n    this.zIndexContext_ = deferredRendering ? new ZIndexContext() : null;\n  }\n\n  /**\n   * @return {ZIndexContext} ZIndex context.\n   */\n  getZIndexContext() {\n    return this.zIndexContext_;\n  }\n\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [\n      textState.scale[0] * pixelRatio,\n      textState.scale[1] * pixelRatio,\n    ];\n    const align = textState.justify\n      ? TEXT_ALIGN[textState.justify]\n      : horizontalTextAlign(\n          Array.isArray(text) ? text[0] : text,\n          textState.textAlign || defaultTextAlign,\n        );\n    const strokeWidth =\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    const chunks = Array.isArray(text)\n      ? text\n      : String(text).split('\\n').reduce(createTextChunks, []);\n\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\n      textState,\n      chunks,\n    );\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions,\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    const leftRight = 0.5 - align;\n    let x = align * renderWidth + leftRight * strokeWidth;\n    const strokeInstructions = [];\n    const fillInstructions = [];\n    let lineHeight = 0;\n    let lineOffset = 0;\n    let widthHeightIndex = 0;\n    let lineWidthIndex = 0;\n    let previousFont;\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\n      const text = chunks[i];\n      if (text === '\\n') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      const font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push('font', font);\n        }\n        if (fillKey) {\n          fillInstructions.push('font', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      const fillStrokeArgs = [\n        text,\n        x +\n          leftRight * widths[widthHeightIndex] +\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\n      ];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push('strokeText', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push('fillText', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(\n    context,\n    p1,\n    p2,\n    p3,\n    p4,\n    fillInstruction,\n    strokeInstruction,\n  ) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignAndScaleFill_ = /** @type {number} */ (fillInstruction[2]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(\n        context,\n        /** @type {Array<*>} */ (strokeInstruction),\n      );\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(\n    sheetWidth,\n    sheetHeight,\n    centerX,\n    centerY,\n    width,\n    height,\n    anchorX,\n    anchorY,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    padding,\n    fillStroke,\n    feature,\n  ) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n\n    let transform;\n    if (rotation !== 0) {\n      transform = composeTransform(\n        createTransform(),\n        centerX,\n        centerY,\n        1,\n        1,\n        rotation,\n        -centerX,\n        -centerY,\n      );\n\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\n        tmpExtent,\n      );\n    } else {\n      createOrUpdate(\n        Math.min(boxX, boxX + boxW),\n        Math.min(boxY, boxY + boxH),\n        Math.max(boxX, boxX + boxW),\n        Math.max(boxY, boxY + boxH),\n        tmpExtent,\n      );\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature,\n      },\n      canvasTransform: transform,\n      scale: scale,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(\n    context,\n    scaledCanvasSize,\n    imageOrLabel,\n    dimensions,\n    opacity,\n    fillInstruction,\n    strokeInstruction,\n  ) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n\n    const box = dimensions.declutterBox;\n    const strokePadding = strokeInstruction\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\n      : 0;\n    const intersects =\n      box.minX - strokePadding <= scaledCanvasSize[0] &&\n      box.maxX + strokePadding >= 0 &&\n      box.minY - strokePadding <= scaledCanvasSize[1] &&\n      box.maxY + strokePadding >= 0;\n\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(\n          context,\n          p1,\n          p2,\n          p3,\n          p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction),\n        );\n      }\n      drawImageOrLabel(\n        context,\n        dimensions.canvasTransform,\n        opacity,\n        imageOrLabel,\n        dimensions.originX,\n        dimensions.originY,\n        dimensions.drawImageW,\n        dimensions.drawImageH,\n        dimensions.drawImageX,\n        dimensions.drawImageY,\n        dimensions.scale,\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    const alignAndScale = this.alignAndScaleFill_;\n    if (alignAndScale) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      if (alignAndScale !== 1) {\n        context.scale(alignAndScale, alignAndScale);\n      }\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (alignAndScale) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context.strokeStyle =\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n  }\n\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(\n      Array.isArray(text) ? text[0] : text,\n      textState.textAlign || defaultTextAlign,\n    );\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    const strokeWidth =\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY =\n      (baseline * label.height) / pixelRatio +\n      2 * (0.5 - baseline) * strokeWidth;\n\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(\n    context,\n    scaledCanvasSize,\n    transform,\n    instructions,\n    snapToPixel,\n    featureCallback,\n    hitExtent,\n    declutterTree,\n  ) {\n    const zIndexContext = this.zIndexContext_;\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(\n        this.coordinates,\n        0,\n        this.coordinates.length,\n        2,\n        transform,\n        this.pixelCoordinates_,\n      );\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX,\n      anchorY,\n      /** @type {import('../../style/Style.js').DeclutterMode} */\n      declutterMode,\n      prevX,\n      prevY,\n      roundX,\n      roundY,\n      image,\n      text,\n      textKey,\n      strokeKey,\n      fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    let lastFillInstruction = null;\n    let lastStrokeInstruction = null;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform =\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n\n    const state = /** @type {import(\"../../render.js\").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation,\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize =\n      this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\n        instruction[0]\n      );\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n            instruction[1]\n          );\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (\n            hitExtent !== undefined &&\n            !intersects(hitExtent, currentGeometry.getExtent())\n          ) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          if (zIndexContext) {\n            zIndexContext.zIndex = instruction[4];\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry =\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\n              instruction[3]\n            );\n          const renderer = instruction[4];\n          const fn = instruction[5];\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          if (zIndexContext) {\n            zIndexContext.zIndex = instruction[6];\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image =\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\n              instruction[3]\n            );\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          let height = /** @type {number} */ (instruction[6]);\n          const opacity = /** @type {number} */ (instruction[7]);\n          const originX = /** @type {number} */ (instruction[8]);\n          const originY = /** @type {number} */ (instruction[9]);\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\n          let rotation = /** @type {number} */ (instruction[11]);\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\n            instruction[12]\n          );\n          let width = /** @type {number} */ (instruction[13]);\n          declutterMode = instruction[14] || 'declutter';\n          const declutterImageWithText =\n            /** @type {{args: import(\"../canvas.js\").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */ (\n              instruction[15]\n            );\n\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */ (instruction[19]);\n            textKey = /** @type {string} */ (instruction[20]);\n            strokeKey = /** @type {string} */ (instruction[21]);\n            fillKey = /** @type {string} */ (instruction[22]);\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\n              text,\n              textKey,\n              strokeKey,\n              fillKey,\n            );\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */ (instruction[23]);\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */ (instruction[24]);\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n\n          let geometryWidths;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */ (instruction[25]);\n          }\n\n          let padding, backgroundFill, backgroundStroke;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */ (instruction[16]);\n            backgroundFill = /** @type {boolean} */ (instruction[17]);\n            backgroundStroke = /** @type {boolean} */ (instruction[18]);\n          } else {\n            padding = defaultPadding;\n            backgroundFill = false;\n            backgroundStroke = false;\n          }\n\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (\n              geometryWidths &&\n              geometryWidths[widthIndex++] < width / this.pixelRatio\n            ) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(\n              image.width,\n              image.height,\n              pixelCoordinates[d],\n              pixelCoordinates[d + 1],\n              width,\n              height,\n              anchorX,\n              anchorY,\n              originX,\n              originY,\n              rotation,\n              scale,\n              snapToPixel,\n              padding,\n              backgroundFill || backgroundStroke,\n              feature,\n            );\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [\n              context,\n              scaledCanvasSize,\n              image,\n              dimensions,\n              opacity,\n              backgroundFill\n                ? /** @type {Array<*>} */ (lastFillInstruction)\n                : null,\n              backgroundStroke\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\n                : null,\n            ];\n            if (declutterTree) {\n              let imageArgs, imageDeclutterMode, imageDeclutterBox;\n              if (declutterImageWithText) {\n                const index = dd - d;\n                if (!declutterImageWithText[index]) {\n                  // We now have the image for an image+text combination.\n                  declutterImageWithText[index] = {args, declutterMode};\n                  // Don't render anything for now, wait for the text.\n                  continue;\n                }\n                const imageDeclutter = declutterImageWithText[index];\n                imageArgs = imageDeclutter.args;\n                imageDeclutterMode = imageDeclutter.declutterMode;\n                delete declutterImageWithText[index];\n                imageDeclutterBox = getDeclutterBox(imageArgs);\n              }\n              // We now have image and text for an image+text combination.\n              let renderImage, renderText;\n              if (\n                imageArgs &&\n                (imageDeclutterMode !== 'declutter' ||\n                  !declutterTree.collides(imageDeclutterBox))\n              ) {\n                renderImage = true;\n              }\n              if (\n                declutterMode !== 'declutter' ||\n                !declutterTree.collides(dimensions.declutterBox)\n              ) {\n                renderText = true;\n              }\n              if (\n                imageDeclutterMode === 'declutter' &&\n                declutterMode === 'declutter'\n              ) {\n                const render = renderImage && renderText;\n                renderImage = render;\n                renderText = render;\n              }\n              if (renderImage) {\n                if (imageDeclutterMode !== 'none') {\n                  declutterTree.insert(imageDeclutterBox);\n                }\n                this.replayImageOrLabel_.apply(this, imageArgs);\n              }\n              if (renderText) {\n                if (declutterMode !== 'none') {\n                  declutterTree.insert(dimensions.declutterBox);\n                }\n                this.replayImageOrLabel_.apply(this, args);\n              }\n            } else {\n              this.replayImageOrLabel_.apply(this, args);\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          const overflow = /** @type {number} */ (instruction[4]);\n          fillKey = /** @type {string} */ (instruction[5]);\n          const maxAngle = /** @type {number} */ (instruction[6]);\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\n          const offsetY = /** @type {number} */ (instruction[8]);\n          strokeKey = /** @type {string} */ (instruction[9]);\n          const strokeWidth = /** @type {number} */ (instruction[10]);\n          text = /** @type {string} */ (instruction[11]);\n          textKey = /** @type {string} */ (instruction[12]);\n          const pixelRatioScale = [\n            /** @type {number} */ (instruction[13]),\n            /** @type {number} */ (instruction[13]),\n          ];\n          declutterMode = instruction[14] || 'declutter';\n\n          const textKeepUpright = /** @type {boolean} */ (instruction[15]);\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [\n            textState.scale[0] * measurePixelRatio,\n            textState.scale[1] * measurePixelRatio,\n          ];\n\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength =\n            Math.abs(textScale[0]) *\n            measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM =\n              (pathLength - textLength) * horizontalTextAlign(text, textAlign);\n            const parts = drawTextOnPath(\n              pixelCoordinates,\n              begin,\n              end,\n              2,\n              text,\n              startM,\n              maxAngle,\n              Math.abs(textScale[0]),\n              measureAndCacheTextWidth,\n              font,\n              cachedWidths,\n              viewRotationFromTransform ? 0 : this.viewRotation_,\n              textKeepUpright,\n            );\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX =\n                    /** @type {number} */ (part[2]) +\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY =\n                    baseline * label.height +\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\n                      textScale[0] -\n                    offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature,\n                  );\n                  if (\n                    declutterTree &&\n                    declutterMode === 'declutter' &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    scaledCanvasSize,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature,\n                  );\n                  if (\n                    declutterTree &&\n                    declutterMode === 'declutter' &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    scaledCanvasSize,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (declutterTree && declutterMode !== 'none') {\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n              instruction[1]\n            );\n            const result = featureCallback(\n              feature,\n              currentGeometry,\n              declutterMode,\n            );\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          context.moveTo(x, y);\n          prevX = (x + 0.5) | 0;\n          prevY = (y + 0.5) | 0;\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignAndScaleFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          /** @type {import(\"../../colorlike.js\").ColorLike} */\n          context.fillStyle = instruction[1];\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default: // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    scaledCanvasSize,\n    transform,\n    viewRotation,\n    snapToPixel,\n    declutterTree,\n  ) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(\n      context,\n      scaledCanvasSize,\n      transform,\n      this.instructions,\n      snapToPixel,\n      undefined,\n      undefined,\n      declutterTree,\n    );\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(\n    context,\n    transform,\n    viewRotation,\n    featureCallback,\n    hitExtent,\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(\n      context,\n      [context.canvas.width, context.canvas.height],\n      transform,\n      this.hitDetectionInstructions,\n      true,\n      featureCallback,\n      hitExtent,\n    );\n  }\n}\n\nexport default Executor;\n", "/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport Executor from './Executor.js';\nimport {ascending, descending} from '../../array.js';\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {isEmpty} from '../../obj.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const ALL = [\n  'Polygon',\n  'Circle',\n  'LineString',\n  'Image',\n  'Text',\n  'Default',\n];\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const DECLUTTER = ['Image', 'Text'];\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nexport const NON_DECLUTTER = ALL.filter(\n  (builderType) => !DECLUTTER.includes(builderType),\n);\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    renderBuffer,\n    deferredRendering,\n  ) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<string, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.renderedContext_ = null;\n\n    /**\n     * @private\n     * @type {Object<number, Array<import(\"./ZIndexContext.js\").default>>}\n     */\n    this.deferredZIndexContexts_ = {};\n\n    this.createExecutors_(allInstructions, deferredRendering);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<string, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   * @param {boolean} deferredRendering Enable deferred rendering.\n   */\n  createExecutors_(allInstructions, deferredRendering) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions,\n          deferredRendering,\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures,\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1],\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(\n        contextSize,\n        contextSize,\n        undefined,\n        {willReadFrequently: true},\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /** @type {import(\"../../extent.js\").Extent|undefined} */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent,\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    /** @type {import(\"../canvas.js\").BuilderType} */\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry, declutterMode) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize,\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            declutterMode === 'none' ||\n            (builderType !== 'Image' && builderType !== 'Text') ||\n            declutteredFeatures.includes(feature)\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ALL.length - 1; j >= 0; --j) {\n        builderType = ALL[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent,\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} targetContext Context.\n   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ALL}\n   * @param {import(\"rbush\").default<import('./Executor.js').DeclutterEntry>|null} [declutterTree] Declutter tree.\n   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.\n   */\n  execute(\n    targetContext,\n    scaledCanvasSize,\n    transform,\n    viewRotation,\n    snapToPixel,\n    builderTypes,\n    declutterTree,\n  ) {\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(declutterTree ? descending : ascending);\n\n    builderTypes = builderTypes ? builderTypes : ALL;\n    const maxBuilderTypes = ALL.length;\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      const replays = this.executorsByZIndex_[zIndexKey];\n      for (let j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        const replay = replays[builderType];\n        if (replay !== undefined) {\n          const zIndexContext =\n            declutterTree === null ? undefined : replay.getZIndexContext();\n          const context = zIndexContext\n            ? zIndexContext.getContext()\n            : targetContext;\n          const requireClip =\n            this.maxExtent_ &&\n            builderType !== 'Image' &&\n            builderType !== 'Text';\n          if (requireClip) {\n            context.save();\n            // setup clipping so that the parts of over-simplified geometries are not\n            // visible outside the current extent when panning\n            this.clip(context, transform);\n          }\n          if (\n            !zIndexContext ||\n            builderType === 'Text' ||\n            builderType === 'Image'\n          ) {\n            replay.execute(\n              context,\n              scaledCanvasSize,\n              transform,\n              viewRotation,\n              snapToPixel,\n              declutterTree,\n            );\n          } else {\n            zIndexContext.pushFunction((context) =>\n              replay.execute(\n                context,\n                scaledCanvasSize,\n                transform,\n                viewRotation,\n                snapToPixel,\n                declutterTree,\n              ),\n            );\n          }\n          if (requireClip) {\n            context.restore();\n          }\n          if (zIndexContext) {\n            zIndexContext.offset();\n            const index = zs[i] * maxBuilderTypes + j;\n            if (!this.deferredZIndexContexts_[index]) {\n              this.deferredZIndexContexts_[index] = [];\n            }\n            this.deferredZIndexContexts_[index].push(zIndexContext);\n          }\n        }\n      }\n    }\n\n    this.renderedContext_ = targetContext;\n  }\n\n  getDeferredZIndexContexts() {\n    return this.deferredZIndexContexts_;\n  }\n\n  getRenderedContext() {\n    return this.renderedContext_;\n  }\n\n  renderDeferred() {\n    const deferredZIndexContexts = this.deferredZIndexContexts_;\n    const zs = Object.keys(deferredZIndexContexts).map(Number).sort(ascending);\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\n      deferredZIndexContexts[zs[i]].forEach((zIndexContext) => {\n        zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip\n        zIndexContext.clear();\n      });\n      deferredZIndexContexts[zs[i]].length = 0;\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\nexport default ExecutorGroup;\n", "/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n} from '../canvas.js';\nimport {equals} from '../../array.js';\nimport {intersects} from '../../extent.js';\nimport {toFixed} from '../../math.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nclass CanvasImmediateRenderer extends VectorContext {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\n   */\n  constructor(\n    context,\n    pixelRatio,\n    extent,\n    transform,\n    viewRotation,\n    squaredTolerance,\n    userTransform,\n  ) {\n    super();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.transformRotation_ = transform\n      ? toFixed(Math.atan2(transform[1], transform[0]), 10)\n      : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.squaredTolerance_ = squaredTolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../proj.js\").TransformFunction}\n     */\n    this.userTransform_ = userTransform;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.imageScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.textScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_,\n    );\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    let rotation = this.imageRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (\n        rotation !== 0 ||\n        this.imageScale_[0] != 1 ||\n        this.imageScale_[1] != 1\n      ) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        composeTransform(\n          localTransform,\n          centerX,\n          centerY,\n          1,\n          1,\n          rotation,\n          -centerX,\n          -centerY,\n        );\n        context.save();\n        context.transform.apply(context, localTransform);\n        context.translate(centerX, centerY);\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          -this.imageAnchorX_,\n          -this.imageAnchorY_,\n          this.imageWidth_,\n          this.imageHeight_,\n        );\n        context.restore();\n      } else {\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          x,\n          y,\n          this.imageWidth_,\n          this.imageHeight_,\n        );\n      }\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_,\n    );\n    const context = this.context_;\n    let rotation = this.textRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (\n        rotation !== 0 ||\n        this.textScale_[0] != 1 ||\n        this.textScale_[1] != 1\n      ) {\n        context.save();\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n        context.rotate(rotation);\n        context.translate(this.textOffsetX_, this.textOffsetY_);\n        context.scale(this.textScale_[0], this.textScale_[1]);\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, 0, 0);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, 0, 0);\n        }\n        context.restore();\n      } else {\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, x, y);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, x, y);\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_,\n    );\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(\n        flatCoordinates,\n        offset,\n        ends[i],\n        stride,\n        true,\n      );\n    }\n    return offset;\n  }\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @api\n   * @override\n   */\n  drawCircle(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Circle.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const pixelCoordinates = transformGeom2D(\n        geometry,\n        this.transform_,\n        this.pixelCoordinates_,\n      );\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0],\n        pixelCoordinates[1],\n        radius,\n        0,\n        2 * Math.PI,\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @api\n   * @override\n   */\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  setTransform(transform) {\n    this.transform_ = transform;\n  }\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @api\n   * @override\n   */\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n    switch (type) {\n      case 'Point':\n        this.drawPoint(\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry),\n        );\n        break;\n      case 'LineString':\n        this.drawLineString(\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry),\n        );\n        break;\n      case 'Polygon':\n        this.drawPolygon(\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry),\n        );\n        break;\n      case 'MultiPoint':\n        this.drawMultiPoint(\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry),\n        );\n        break;\n      case 'MultiLineString':\n        this.drawMultiLineString(\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          ),\n        );\n        break;\n      case 'MultiPolygon':\n        this.drawMultiPolygon(\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ),\n        );\n        break;\n      case 'GeometryCollection':\n        this.drawGeometryCollection(\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          ),\n        );\n        break;\n      case 'Circle':\n        this.drawCircle(\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry),\n        );\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @api\n   * @override\n   */\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   * @override\n   */\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   * @override\n   */\n  drawPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   * @override\n   */\n  drawMultiPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   * @override\n   */\n  drawLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        geometry.getStride(),\n        false,\n      );\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   * @override\n   */\n  drawMultiLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry.simplifyTransformed(\n            this.squaredTolerance_,\n            this.userTransform_,\n          )\n        );\n    }\n    const geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(\n          flatCoordinates,\n          offset,\n          ends[i],\n          stride,\n          false,\n        );\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   * @override\n   */\n  drawPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(\n        geometry.getOrientedFlatCoordinates(),\n        0,\n        /** @type {Array<number>} */ (geometry.getEnds()),\n        geometry.getStride(),\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @override\n   */\n  drawMultiPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_,\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle,\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = fillState.fillStyle;\n        context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      context.setLineDash(strokeState.lineDash);\n      context.lineDashOffset = strokeState.lineDashOffset;\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle,\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = strokeState.lineCap;\n        context.lineCap = strokeState.lineCap;\n      }\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n        context.setLineDash(\n          (contextStrokeState.lineDash = strokeState.lineDash),\n        );\n      }\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = strokeState.lineJoin;\n        context.lineJoin = strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = strokeState.lineWidth;\n        context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = strokeState.miterLimit;\n        context.miterLimit = strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\n        context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign\n      ? textState.textAlign\n      : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline,\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = textState.font;\n        context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = textAlign;\n        context.textAlign = textAlign;\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = textState.textBaseline;\n        context.textBaseline = textState.textBaseline;\n      }\n    }\n  }\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   * @override\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(\n          fillStyleColor ? fillStyleColor : defaultFillStyle,\n        ),\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      const lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash\n        : defaultLineDash;\n      this.strokeState_ = {\n        lineCap:\n          strokeStyleLineCap !== undefined\n            ? strokeStyleLineCap\n            : defaultLineCap,\n        lineDash:\n          this.pixelRatio_ === 1\n            ? lineDash\n            : lineDash.map((n) => n * this.pixelRatio_),\n        lineDashOffset:\n          (strokeStyleLineDashOffset\n            ? strokeStyleLineDashOffset\n            : defaultLineDashOffset) * this.pixelRatio_,\n        lineJoin:\n          strokeStyleLineJoin !== undefined\n            ? strokeStyleLineJoin\n            : defaultLineJoin,\n        lineWidth:\n          (strokeStyleWidth !== undefined\n            ? strokeStyleWidth\n            : defaultLineWidth) * this.pixelRatio_,\n        miterLimit:\n          strokeStyleMiterLimit !== undefined\n            ? strokeStyleMiterLimit\n            : defaultMiterLimit,\n        strokeStyle: asColorLike(\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\n        ),\n      };\n    }\n  }\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @override\n   */\n  setImageStyle(imageStyle) {\n    let imageSize;\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n      this.image_ = null;\n      return;\n    }\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n    const imageAnchor = imageStyle.getAnchor();\n    const imageOrigin = imageStyle.getOrigin();\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    const imageScale = imageStyle.getScaleArray();\n    this.imageScale_ = [\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\n    ];\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\n  }\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @override\n   */\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle,\n          ),\n        };\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset =\n          textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap:\n            textStrokeStyleLineCap !== undefined\n              ? textStrokeStyleLineCap\n              : defaultLineCap,\n          lineDash: textStrokeStyleLineDash\n            ? textStrokeStyleLineDash\n            : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset\n            ? textStrokeStyleLineDashOffset\n            : defaultLineDashOffset,\n          lineJoin:\n            textStrokeStyleLineJoin !== undefined\n              ? textStrokeStyleLineJoin\n              : defaultLineJoin,\n          lineWidth:\n            textStrokeStyleWidth !== undefined\n              ? textStrokeStyleWidth\n              : defaultLineWidth,\n          miterLimit:\n            textStrokeStyleMiterLimit !== undefined\n              ? textStrokeStyleMiterLimit\n              : defaultMiterLimit,\n          strokeStyle: asColorLike(\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle,\n          ),\n        };\n      }\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScaleArray();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign:\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline:\n          textTextBaseline !== undefined\n            ? textTextBaseline\n            : defaultTextBaseline,\n      };\n      this.text_ =\n        textText !== undefined\n          ? Array.isArray(textText)\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\n            : textText\n          : '';\n      this.textOffsetX_ =\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ =\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ =\n        textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = [\n        this.pixelRatio_ * textScale[0],\n        this.pixelRatio_ * textScale[1],\n      ];\n    }\n  }\n}\n\nexport default CanvasImmediateRenderer;\n", "/**\n * @module ol/style\n */\n\nexport {default as Circle} from './style/Circle.js';\nexport {default as Fill} from './style/Fill.js';\nexport {default as Icon} from './style/Icon.js';\nexport {default as IconImage} from './style/IconImage.js';\nexport {default as Image} from './style/Image.js';\nexport {default as RegularShape} from './style/RegularShape.js';\nexport {default as Stroke} from './style/Stroke.js';\nexport {default as Style} from './style/Style.js';\nexport {default as Text} from './style/Text.js';\n", "/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport {Icon} from '../../style.js';\nimport {ascending} from '../../array.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n} from '../../proj.js';\nimport {intersects} from '../../extent.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} [squaredTolerance] Squared tolerance.\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation,\n  squaredTolerance,\n  projection,\n) {\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation,\n    squaredTolerance,\n    projection\n      ? getTransformFromProjections(getUserProjection(), projection)\n      : null,\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!featureStyleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false},\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            anchor: image.getAnchor(),\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          }),\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      const type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        const geometries =\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          ).getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\n            geometry,\n            style,\n          );\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\nexport function hitDetect(pixel, features, imageData) {\n  /** @type {Array<F>} */\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}\n", "/**\n * @module ol/renderer/vector\n */\nimport ImageState from '../ImageState.js';\nimport {getUid} from '../util.js';\n\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nconst SIMPLIFY_TOLERANCE = 0.5;\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nconst GEOMETRY_RENDERERS = {\n  'Point': renderPointGeometry,\n  'LineString': renderLineStringGeometry,\n  'Polygon': renderPolygonGeometry,\n  'MultiPoint': renderMultiPointGeometry,\n  'MultiLineString': renderMultiLineStringGeometry,\n  'MultiPolygon': renderMultiPolygonGeometry,\n  'GeometryCollection': renderGeometryCollectionGeometry,\n  'Circle': renderCircleGeometry,\n};\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n  const tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {number} [index] Render order index.\n */\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, index) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature, index);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n * @param {boolean} [declutter] Enable decluttering.\n * @param {number} [index] Render order index..\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  listener,\n  transform,\n  declutter,\n  index,\n) {\n  const loadingPromises = [];\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    let loading = true;\n    const imageState = imageStyle.getImageState();\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n      loading = false;\n    } else {\n      if (imageState == ImageState.IDLE) {\n        imageStyle.load();\n      }\n    }\n    if (loading) {\n      loadingPromises.push(imageStyle.ready());\n    }\n  }\n  const fillStyle = style.getFill();\n  if (fillStyle && fillStyle.loading()) {\n    loadingPromises.push(fillStyle.ready());\n  }\n  const loading = loadingPromises.length > 0;\n  if (loading) {\n    Promise.all(loadingPromises).then(() => listener(null));\n  }\n  renderFeatureInternal(\n    replayGroup,\n    feature,\n    style,\n    squaredTolerance,\n    transform,\n    declutter,\n    index,\n  );\n\n  return loading;\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n * @param {boolean} [declutter] Enable decluttering.\n * @param {number} [index] Render order index..\n */\nfunction renderFeatureInternal(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  transform,\n  declutter,\n  index,\n) {\n  const geometry = style.getGeometryFunction()(feature);\n  if (!geometry) {\n    return;\n  }\n  const simplifiedGeometry = geometry.simplifyTransformed(\n    squaredTolerance,\n    transform,\n  );\n  const renderer = style.getRenderer();\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature, index);\n  } else {\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(\n      replayGroup,\n      simplifiedGeometry,\n      style,\n      feature,\n      index,\n      declutter,\n    );\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} [index] Render order index.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature, index) {\n  if (geometry.getType() == 'GeometryCollection') {\n    const geometries =\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n        geometry\n      ).getGeometries();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature, index);\n    }\n    return;\n  }\n  const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\n  replay.drawCustom(\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\n    feature,\n    style.getRenderer(),\n    style.getHitDetectionRenderer(),\n    index,\n  );\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n * @param {number} [index] Render order index.\n */\nfunction renderGeometryCollectionGeometry(\n  replayGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup,\n  index,\n) {\n  const geometries = geometry.getGeometriesArray();\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(\n      replayGroup,\n      geometries[i],\n      style,\n      feature,\n      declutterBuilderGroup,\n      index,\n    );\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} [index] Render order index.\n */\nfunction renderLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  index,\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      'LineString',\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature, index);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature, index);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} [index] Render order index.\n */\nfunction renderMultiLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  index,\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      'LineString',\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature, index);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature, index);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {number} [index] Render order index.\n */\nfunction renderMultiPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  index,\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (strokeStyle || fillStyle) {\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature, index);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature, index);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} [index] Render order index.\n * @param {boolean} [declutter] Enable decluttering.\n */\nfunction renderPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  index,\n  declutter,\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  const hasText = textStyle && textStyle.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  const declutterImageWithText =\n    declutter && imageStyle && hasText ? {} : undefined;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawPoint(geometry, feature, index);\n  }\n  if (hasText) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature, index);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} [index] Render order index.\n * @param {boolean} [declutter] Enable decluttering.\n */\nfunction renderMultiPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  index,\n  declutter,\n) {\n  const imageStyle = style.getImage();\n  const hasImage = imageStyle && imageStyle.getOpacity() !== 0;\n  const textStyle = style.getText();\n  const hasText = textStyle && textStyle.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  const declutterImageWithText =\n    declutter && hasImage && hasText ? {} : undefined;\n  if (hasImage) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawMultiPoint(geometry, feature, index);\n  }\n  if (hasText) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature, index);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} [index] Render order index.\n */\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, index) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature, index);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature, index);\n  }\n}\n", "/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup, {\n  ALL,\n  DECLUTTER,\n  NON_DECLUTTER,\n} from '../../render/canvas/ExecutorGroup.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getHeight,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @private\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.clipped_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedPixelRatio_ = 1;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedFrameDeclutter_;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.targetContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\n   *     `false` to only render non-declutterable items, `undefined` to render all.\n   */\n  renderWorlds(executorGroup, frameState, declutterable) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const declutter = this.getLayer().getDeclutter();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.context;\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      let transform = this.getRenderTransform(\n        center,\n        resolution,\n        0,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth,\n      );\n      if (frameState.declutter) {\n        transform = transform.slice(0);\n      }\n      executorGroup.execute(\n        context,\n        [context.canvas.width, context.canvas.height],\n        transform,\n        rotation,\n        snapToPixel,\n        declutterable === undefined\n          ? ALL\n          : declutterable\n            ? DECLUTTER\n            : NON_DECLUTTER,\n        declutterable\n          ? declutter && frameState.declutter[declutter]\n          : undefined,\n      );\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @private\n   */\n  setDrawContext_() {\n    if (this.opacity_ !== 1) {\n      this.targetContext_ = this.context;\n      this.context = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool,\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetDrawContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.targetContext_.globalAlpha;\n      this.targetContext_.globalAlpha = this.opacity_;\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\n      this.targetContext_.globalAlpha = alpha;\n      releaseCanvas(this.context);\n      canvasPool.push(this.context.canvas);\n      this.context = this.targetContext_;\n      this.targetContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\n      return;\n    }\n    this.renderWorlds(this.replayGroup_, frameState, true);\n  }\n\n  /**\n   * Render deferred instructions.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferredInternal(frameState) {\n    if (!this.replayGroup_) {\n      return;\n    }\n    this.replayGroup_.renderDeferred();\n    if (this.clipped_) {\n      this.context.restore();\n    }\n    this.resetDrawContext_();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    this.opacity_ = layerState.opacity;\n    const viewState = frameState.viewState;\n\n    this.prepareContainer(frameState, target);\n    const context = this.context;\n\n    const replayGroup = this.replayGroup_;\n    let render = replayGroup && !replayGroup.isEmpty();\n    if (!render) {\n      const hasRenderListeners =\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\n      if (!hasRenderListeners) {\n        return null;\n      }\n    }\n\n    this.setDrawContext_();\n\n    this.preRender(context, frameState);\n\n    const projection = viewState.projection;\n\n    // clipped rendering if layer extent is set\n    this.clipped_ = false;\n    if (render && layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\n      if (this.clipped_) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(\n        replayGroup,\n        frameState,\n        this.getLayer().getDeclutter() ? false : undefined,\n      );\n    }\n\n    if (!frameState.declutter && this.clipped_) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    if (!frameState.declutter) {\n      this.resetDrawContext_();\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   * @override\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (\n        this.frameState &&\n        !this.hitDetectionImageData_ &&\n        !this.animatingOrInteracting_\n      ) {\n        const size = this.frameState.size.slice();\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            HIT_DETECT_RESOLUTION,\n            width,\n            height,\n            0,\n          ).slice(),\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX,\n              ).slice(),\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX,\n              ).slice(),\n            );\n            startX -= worldWidth;\n          }\n        }\n        const userProjection = getUserProjection();\n        this.hitDetectionImageData_ = createHitDetectionImageData(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation,\n          getSquaredRenderTolerance(resolution, this.renderedPixelRatio_),\n          userProjection ? projection : null,\n        );\n      }\n      resolve(\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_),\n      );\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          }),\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    const declutter = this.getLayer().getDeclutter();\n    return this.replayGroup_.forEachFeatureAtCoordinate(\n      coordinate,\n      resolution,\n      rotation,\n      hitTolerance,\n      featureCallback,\n      declutter\n        ? frameState.declutter[declutter].all().map((item) => item.value)\n        : null,\n    );\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @override\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution,\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      this.renderedFrameDeclutter_ === !!frameState.declutter &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio,\n    );\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection,\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       * @param {number} index Index.\n       */\n      (feature, index) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            this.getLayer().getDeclutter(),\n            index,\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i], i);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer(),\n      !!frameState.declutter,\n    );\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.renderedPixelRatio_ = pixelRatio;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutter,\n    index,\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutter,\n            index,\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutter,\n        index,\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n", "/**\n * @module ol/layer/Vector\n */\nimport BaseVectorLayer from './BaseVector.js';\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\n * layers or groups of layers separately, use different truthy values for `declutter`.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\n * even during animations. Points and labels stay upright on rotated views. For very large\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\n * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorLayerRenderer>}\n * @api\n */\nclass VectorLayer extends BaseVectorLayer {\n  /**\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasVectorLayerRenderer(this);\n  }\n}\n\nexport default VectorLayer;\n"],
  "mappings": "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",
  "names": ["fillInstruction", "p1", "p2", "p3", "measureAndCacheTextWidth", "init_transform", "init_transform", "text", "p1", "p2", "p3", "p4", "fillInstruction", "strokeInstruction", "intersects", "i", "ii", "init_transform", "i", "result", "context", "init_transform", "i", "geometry", "loading", "wrapX", "extent", "userExtent"]
}
